#print(i)
exponent <- 1 + i
model <- lm(Open^exponent ~ Date, data = bitcoin_price)
if (sum(resid(model)^2) < low){
low = sum(resid(model^2))
low_index = i
}
}
print(low_index)
for (i in seq(from=-0.4, to=0.4, by = 0.01)){
#print(i)
exponent <- 1 + i
model <- lm(Open^exponent ~ Date, data = bitcoin_price)
print(sum(resid(model)^2))
if (sum(resid(model)^2) < low){
low = sum(resid(model^2))
low_index = i
}
}
for (i in seq(from=-0.4, to=0.4, by = 0.01)){
#print(i)
exponent <- 1 + i
model <- lm(Open^exponent ~ Date, data = bitcoin_price)
print(sum(resid(model)^2))
if (sum(resid(model)^2) < low){
low = sum(resid(model^2))
low_index = i
print(i)
}
}
low = 99999999999999999999999
low_index = 0
for (i in seq(from=-0.4, to=0.4, by = 0.01)){
#print(i)
exponent <- 1 + i
model <- lm(Open^exponent ~ Date, data = bitcoin_price)
print(sum(resid(model)^2))
if (sum(resid(model)^2) < low){
low = sum(resid(model^2))
low_index = i
print(i)
}
}
print(low_index)
low_index = 0
for (i in seq(from=-0.4, to=0.4, by = 0.01)){
#print(i)
exponent <- 1 + i
model <- lm(Open^exponent ~ Date, data = bitcoin_price)
print(sum(resid(model)^2))
if (sum(resid(model)^2) < low){
low = sum(resid(model)^2)
low_index = i
print(i)
}
}
print(low_index)
model <- lm(Open^(1 + low_index) ~ Date, data = bitcoin_price)
#model <- lm(formula = Date ~ Open, data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(y = predict(model), name = "Predicted Price")
plot(bitcoin_price$Date, model)
p
model <- lm(Open^(1 + 0.03) ~ Date, data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(y = predict(model), name = "Predicted Price")
plot(bitcoin_price$Date, model)
p
p
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(y = predict(model), name = "Predicted Price")
p
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(y = predict(model), name = "Predicted Price")
p
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
add_lines(y = predict(model), name = "Predicted Price")
p
for (i in seq(from=-0.4, to=0.4, by = 0.01)){
#print(i)
exponent <- 1 + i
model <- lm(Open^exponent ~ Date, data = bitcoin_price)
print(sum(resid(model)^2))
if (sum(resid(model)^2) < low){
low = sum(resid(model)^2)
low_index = i
print(i)
}
}
print(low_index)
model <- lm(Open^(1 + low_index) ~ Date, data = bitcoin_price)
#model <- lm(formula = Date ~ Open, data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
add_lines(y = predict(model), name = "Predicted Price")
p
model <- lm(Open^(1 + 0.06) ~ Date, data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
add_lines(y = predict(model), name = "Predicted Price")
p
model <- lm(Open^(1 + 4) ~ Date, data = bitcoin_price)
#model <- lm(formula = Date ~ Open, data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
add_lines(y = predict(model), name = "Predicted Price")
p
model <- lm(Open^(1 + 0.04) ~ Date, data = bitcoin_price)
#model <- lm(formula = Date ~ Open, data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
add_lines(y = predict(model), name = "Predicted Price")
p
help(resid)
for (i in seq(from=-0.4, to=0.4, by = 0.01)){
#print(i)
exponent <- 1 + i
model <- lm(Open^exponent ~ Date, data = bitcoin_price)
print(summary(model)$r.squared)
if (sum(resid(model)^2) < low){
low = sum(resid(model)^2)
low_index = i
print(i)
}
}
high = 0
high_index = 0
for (i in seq(from=-0.4, to=0.4, by = 0.01)){
#print(i)
exponent <- 1 + i
model <- lm(Open^exponent ~ Date, data = bitcoin_price)
print(summary(model)$r.squared)
if (summary(model)$r.squared > high){
high = summary(model)$r.squared
high_index = i
print(i)
}
}
print(high_index)
model <- lm(Open^(1 + high_index) ~ Date, data = bitcoin_price)
#model <- lm(formula = Date ~ Open, data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
add_lines(y = predict(model), name = "Predicted Price")
p
for (i in seq(from=-0.4, to=0.4, by = 0.01)){
#print(i)
exponent <- 1 + i
model <- lm(Open^exponent ~ Date, data = bitcoin_price)
print(summary(model)$adj.r.squared)
if (summary(model)$r.squared > high){
high = summary(model)$r.squared
high_index = i
print(i)
}
}
for (i in seq(from=-0.4, to=0.4, by = 0.01)){
#print(i)
exponent <- 1 + i
model <- lm(Open^exponent ~ Date, data = bitcoin_price)
print(summary(model)$adj.r)
if (summary(model)$r.squared > high){
high = summary(model)$r.squared
high_index = i
print(i)
}
}
print
model <- lm(Open^(1 + high_index) ~ Date, data = bitcoin_price)
summary(resid(model)^2)
resid(model))^2
resid(model)^2
sum(resid(model)^2)
todays_date = format(Sys.Date(), "%Y%m%d")
formatted_date = format(Sys.Date(), "%b-%d-%Y")
#enter your working directory here
wd <- "C:\\Users\\shubh\\Documents\\GitHub\\bitcoin_data"
setwd(wd)
dir.create(formatted_date)
txt_list <- unlist(strsplit(readLines("https://coinmarketcap.com/currencies/bitcoin/historical-data/?start=20130428&end=20171105"), "\n"))
start_of_data <- grep("<tbody>", txt_list) + 3
#end_of_data <- grep("/tbody", txt_list)
end_of_data <- grep("Jan 01, 2017", txt_list) + 9
find_date <- function(txt_list) {
list_of_dates = list()
library(qdapRegex)
for(i in seq(from=start_of_data, to=end_of_data, by=10)){
list_of_dates = c(list_of_dates, rm_between(txt_list[i], "t\">", "</", extract=TRUE)[[1]])
}
return(unlist(list_of_dates))
}
#list_dates = find_date(txt_list)
find_open <- function(txt_list) {
list_of_open_price = list()
library(qdapRegex)
for(i in seq(from=start_of_data + 1, to=end_of_data, by=10)){
list_of_open_price = c(list_of_open_price, as.double(rm_between(txt_list[i], "<td>", "</td>", extract=TRUE)[[1]]))
}
return(unlist(list_of_open_price))
}
#list_open_price = find_open()
find_high <- function(txt_list) {
list_of_high_price = list()
library(qdapRegex)
for(i in seq(from=start_of_data + 2, to=end_of_data, by=10)){
list_of_high_price = c(list_of_high_price, as.double(rm_between(txt_list[i], "<td>", "</td>", extract=TRUE)[[1]]))
}
return(unlist(list_of_high_price))
}
#list_high_price = find_high()
find_low <- function(txt_list) {
list_of_low_price = list()
library(qdapRegex)
for(i in seq(from=start_of_data + 3, to=end_of_data, by=10)){
list_of_low_price = c(list_of_low_price, as.double(rm_between(txt_list[i], "<td>", "</td>", extract=TRUE)[[1]]))
}
return(unlist(list_of_low_price))
}
#list_low_price = find_low()
find_close <- function(txt_list) {
list_of_close_price = list()
library(qdapRegex)
for(i in seq(from=start_of_data + 4, to=end_of_data, by=10)){
list_of_close_price = c(list_of_close_price, as.double(rm_between(txt_list[i], "<td>", "</td>", extract=TRUE)[[1]]))
}
return(unlist(list_of_close_price))
}
#list_close_price = find_close()
find_volume <- function(txt_list) {
list_of_volume_price = list()
library(qdapRegex)
for(i in seq(from=start_of_data + 5, to=end_of_data, by=10)){
list_of_volume_price = c(list_of_volume_price, as.double(gsub(",", "", rm_between(txt_list[i], "<td>", "</td>", extract=TRUE)[[1]])))
}
return(unlist(list_of_volume_price))
}
#list_volume_price = find_volume(txt_list)
find_market <- function(txt_list) {
list_of_market_price = list()
library(qdapRegex)
for(i in seq(from=start_of_data + 6, to=end_of_data, by=10)){
list_of_market_price = c(list_of_market_price, as.double(gsub(",", "", rm_between(txt_list[i], "<td>", "</td>", extract=TRUE)[[1]])))
}
return(unlist(list_of_market_price))
}
#list_market_price = find_market()
# cryptocurrencies <- function() {
#     website <- "https://coinmarketcap.com/all/views/all/"
#     html_text <- readLines(website)
#     crypto_list <- unlist(strsplit(html_text, "\n"))
#     write(html_text, "crypto.txt")
#     return(crypto_list)
#
# }
#
# get_currencies <- function() {
#     crypto_list <- cryptocurrencies()
#     crypto_list <- unlist(crypto_list)
#     library(qdapRegex)
#     list_of_currencies = list()
#     start <- which(grepl("bitcoin", crypto_list),arr.ind = TRUE)[4]
#     for (i in seq(from=start, to=(start+ 400) - 1, by=40)){
#         list_of_currencies <- c(list_of_currencies, rm_between(crypto_list[i], "\">", "</a>", extract = TRUE)[[1]])
#     }
#     print(list_of_currencies)
#     return(unlist(list_of_currencies))
# }
list_of_currencies <- c("Bitcoin", "Ethereum", "Dash", "Bitcoin-Cash", "Ethereum-Classic", "LiteCoin", "Monero", "Ripple", "NEM", "NEO")
get_df <- function(website){
thepage <- readLines(website)
txt_list <- unlist(strsplit(thepage, "\n"))
start_of_data <- grep("<tbody>", txt_list) + 3
end_of_data <- grep("/tbody", txt_list)
list_dates <- find_date(txt_list)
list_open_price <- find_open(txt_list)
list_high_price<- find_high(txt_list)
list_low_price <- find_low(txt_list)
list_close_price <- find_close(txt_list)
list_volume_price <- find_volume(txt_list)
list_market_price <- find_market(txt_list)
df <- data.frame("Date" = list_dates, "Open" = list_open_price, "High" = list_high_price,
"Low" = list_low_price, "Close" = list_close_price,
"Volume" = list_volume_price, "Market Cap" = list_market_price)
return(df)
}
df <- get_df(input)
write_csv <- function() {
#list_of_currencies <- get_currencies()
todays_date = format(Sys.Date(), "%Y%m%d")
formatted_date = format(Sys.Date(), "%b-%d-%Y")
setwd(wd)
#dir.create(formatted_date)
setwd(paste(wd, "\\", formatted_date, sep = ""))
for (i in seq(from = 1, to = length(list_of_currencies), by = 1)){
list_of_currencies[i] <- gsub(" ", "-", list_of_currencies[i])
csv_name <- paste(list_of_currencies[i], ".csv", sep = "")
print(paste("Creating",csv_name))
website <- paste("https://coinmarketcap.com/currencies/", list_of_currencies[i],"/historical-data/?start=20130428&end=", toString(todays_date), sep = "")
df <- get_df(website)
write.csv(df, csv_name)
}
}
write_csv()
setwd(paste(wd, "\\", formatted_date, sep = ""))
bitcoin_price <- read.csv("Bitcoin.csv")
bitcoin_price$Date<- as.Date(bitcoin_price$Date, format = "%b %d, %Y")
x <- list(
title = "Date"
)
y <- list(
title = "Price in $"
)
library(plotly)
#open_squared <- bitcoin_price$Open
high = 0
high_index = 0
for (i in seq(from=-0.4, to=0.4, by = 0.01)){
#print(i)
exponent <- 1 + i
model <- lm(Open^exponent ~ Date, data = bitcoin_price)
print(summary(resid(model)^2))
if (summary(model)$r.squared > high){
high = summary(model)$r.squared
high_index = i
print(i)
}
}
print(high_index)
model <- lm(Open^(1 + high_index) ~ Date, data = bitcoin_price)
sum(resid(model)^2)
#model <- lm(formula = Date ~ Open, data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
add_lines(y = predict(model), name = "Predicted Price")
p
model$r.squared
for (i in seq(from=-0.4, to=0.4, by = 0.01)){
#print(i)
exponent <- 1 + i
model <- lm(Open^exponent ~ Date, data = bitcoin_price)
print(sum(resid(model)^2))
if (summary(model)$r.squared > high){
high = summary(model)$r.squared
high_index = i
print(i)
}
}
model <- lm(Open^(1) ~ Date, data = bitcoin_price)
sum(resid(model)^2)
#model <- lm(formula = Date ~ Open, data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
add_lines(y = predict(model), name = "Predicted Price")
p
model <- lm(Open^(1) + 1000 ~ Date, data = bitcoin_price)
sum(resid(model)^2)
#model <- lm(formula = Date ~ Open, data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
add_lines(y = predict(model), name = "Predicted Price")
p
for (i in seq(from=-0.4, to=0.4, by = 0.01)){
#print(i)
exponent <- 1 + i
model <- lm(Open^exponent + 1000 ~ Date, data = bitcoin_price)
print(sum(resid(model)^2))
if (summary(model)$r.squared > high){
high = summary(model)$r.squared
high_index = i
print(i)
}
}
print(high_index)
for (i in seq(from=-0.4, to=0.4, by = 0.01)){
#print(i)
exponent <- 1 + i
model <- lm(Open^(exponent) + 1000 ~ Date, data = bitcoin_price)
print(sum(resid(model)^2))
if (summary(model)$r.squared > high){
high = summary(model)$r.squared
high_index = i
print(i)
}
}
print(high_index)
model <- lm(Open^(1.05) + 1000 ~ Date, data = bitcoin_price)
sum(resid(model)^2)
#model <- lm(formula = Date ~ Open, data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
add_lines(y = predict(model), name = "Predicted Price")
p
predict(model)
model
as.numeric(bitcoin_price$Date[1])
model <- lm(Open^(1.05) + 1000 ~ (Date + 17488), data = bitcoin_price)
as.Date(17488)
?as.Date
as.Date(17488, origin = "Jan-1-1970")
as.Date(17488, origin = "1970-1-1")
as.numeric(bitcoin_price$Date[length(bitcoin_price$Date)])
model <- lm(Open^(1.05) + 1000 ~ (Date + as.Date(17180, origin = "1970-1-1")), data = bitcoin_price)
model <- lm(Open^(1.05) + 1000 ~ as.numeric(Date) + 17180, data = bitcoin_price)
as.numeric(bitcoin_price$Date)
model <- lm(Open^(1.05) + 1000 ~ as.numeric(Date), data = bitcoin_price)
sum(resid(model)^2)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
add_lines(y = predict(model), name = "Predicted Price")
p
for (i in seq(from=-0.4, to=0.4, by = 0.01)){
#print(i)
exponent <- 1 + i
model <- lm(Open^(exponent)~ as.numeric(Date), data = bitcoin_price)
print(sum(resid(model)^2))
if (summary(model)$r.squared > high){
high = summary(model)$r.squared
high_index = i
print(i)
}
}
print(high_index)
high = 0
high_index = 0
for (i in seq(from=-0.4, to=0.4, by = 0.01)){
#print(i)
exponent <- 1 + i
model <- lm(Open^(exponent) + 1000 ~ as.numeric(Date), data = bitcoin_price)
print(sum(resid(model)^2))
if (summary(model)$r.squared > high){
high = summary(model)$r.squared
high_index = i
print(i)
}
}
print(high_index)
high = 0
high_index = 0
for (i in seq(from=0, to=2, by = 0.01)){
#print(i)
exponent <- i
model <- lm(Open^(exponent) + 1000 ~ as.numeric(Date), data = bitcoin_price)
print(sum(resid(model)^2))
if (summary(model)$r.squared > high){
high = summary(model)$r.squared
high_index = i
print(i)
}
}
print(high_index)
for (i in seq(from=0, to=2, by = 0.01)){
#print(i)
exponent <- i
model <- lm(Open^(exponent) + 1000 ~ as.numeric(Date), data = bitcoin_price)
print(sum((predict(model) - bitcoin_price$Open)^2))
if (summary(model)$r.squared > high){
high = summary(model)$r.squared
high_index = i
print(i)
}
}
low = 99999999999999999999999999999999
low_index = 0
for (i in seq(from=0, to=2, by = 0.01)){
#print(i)
exponent <- i
model <- lm(Open^(exponent) + 1000 ~ as.numeric(Date), data = bitcoin_price)
print(sum((predict(model) - bitcoin_price$Open)^2))
if (sum((predict(model) - bitcoin_price$Open)^2) < low){
low = sum((predict(model) - bitcoin_price$Open)^2)
low_index = i
print(i)
}
}
print(high_index)
low = 99999999999999999999999999999999
low_index = 0
for (i in seq(from=0, to=2, by = 0.01)){
#print(i)
exponent <- i
model <- lm(Open^(exponent) ~ as.numeric(Date), data = bitcoin_price)
print(sum((predict(model) - bitcoin_price$Open)^2))
if (sum((predict(model) - bitcoin_price$Open)^2) < low){
low = sum((predict(model) - bitcoin_price$Open)^2)
low_index = i
print(i)
}
}
print(low_index)
low = 99999999999999999999999999999999
low_index = 0
for (i in seq(from=0, to=2, by = 0.01)){
#print(i)
exponent <- i
model <- lm(Open^(exponent) + 1000 ~ as.numeric(Date), data = bitcoin_price)
print(sum((predict(model) - bitcoin_price$Open)^2))
if (sum((predict(model) - bitcoin_price$Open)^2) < low){
low = sum((predict(model) - bitcoin_price$Open)^2)
low_index = i
print(i)
}
}
print(low_index)
low = 99999999999999999999999999999999
low_index = 0
for (i in seq(from=0, to=2, by = 0.01)){
#print(i)
exponent <- i
model <- lm(Open^(exponent) + 1000 ~ as.numeric(Date), data = bitcoin_price)
print(sum((predict(model) - bitcoin_price$Open)^2))
if (sum((predict(model) - bitcoin_price$Open)^2) < low){
low = sum((predict(model) - bitcoin_price$Open)^2)
low_index = i
print(i)
}
}
print(low_index)
model <- lm(Open^(low_index) + 1000 ~ as.numeric(Date), data = bitcoin_price)
#model <- lm(formula = Date ~ Open, data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
add_lines(y = predict(model), name = "Predicted Price")
p
