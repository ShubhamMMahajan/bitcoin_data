g <- ggplot(car_data, aes(x=mpg)) + geom_histogram() + facet_grid(am ~ .)
g
result <- t.test(mpg ~ am, data = car_data)
result$p.value
result$estimate
fit <- lm(mpg ~ am, data = car_data)
summary(fit)
fit2 <- lm(mpg ~ ., data = car_data)
summary(fit2)
other_var<-lm(mpg ~ wt + qsec + am + wt:am, data=mtcars)
summary(other_var)
anova(fit, fit2, other_var)
summary(other_var)$coef
par(mfrow = c(2, 2))
plot(other_var)
data("mtcars")
car_data <- mtcars
car_data$am <- factor(car_data$am)
levels(car_data$am) <- c("automatic", "manual")
install.packages("ISLR")
install.packages("caret")
library(ISLR)
library(ggplot2)
library(caret)
data(wage)
summary(wage)
data(Wage)
summary(Wage)
inTrain <- createDataPartition(y = Wage$wage, p = 0.7, list = FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain, ]
dim(training)
dim(testing)
install.packages("kernlab")
library(kernlab)
data(spam)
dim(spam)
colnames(spam)
save(R.data)
M <- abs(cor(training[,-58]))
library(kernlab)
library(kernlab)
data(spam)
set.seed(13343)
inTrain(y=spam$type, probe = 0.7, list = FALSE)
training <- spam[inTrain, ]
testing <- spam[-inTrain, ]
training$capAve <- training$capitalAve
M <- abs(cor(training[,-58]))
library(caret)
library(kernlab)
data(spam)
set.seed(13343)
inTrain(y=spam$type, probe = 0.7, list = FALSE)
training <- spam[inTrain, ]
testing <- spam[-inTrain, ]
training$capAve <- training$capitalAve
M <- abs(cor(training[,-58]))
inTrain <- createDataPartition(y=spam$type, probe = 0.7, list = FALSE)
inTrain <- createDataPartition(y=spam$type, prob = 0.7, list = FALSE)
inTrain <- createDataPartition(y=spam$type, p = 0.7, list = FALSE)
training <- spam[inTrain, ]
testing <- spam[-inTrain, ]
training$capAve <- training$capitalAve
M <- abs(cor(training[,-58]))
diag(M) <- 0
which(M > 0.8, arr.ind = T)
?cut2
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
colnames(training)
index <-1:length(training$CompressiveStrength)
plot(index ,training$CompressiveStrength), color = cut2(index, g = 10)
plot(index ,training$CompressiveStrength, color = cut2(index, g = 10))
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
index <-1:length(training$CompressiveStrength)
plot(index ,training$CompressiveStrength, color = cut2(index, g = 10))
plot(index ,training$CompressiveStrength, col = cut2(index, g = 10))
head(concrete)
View(concrete)
View(concrete)
plot(index ,training$CompressiveStrength, col = cut2(colnames(concrete), m = 8))
plot(index ,training$CompressiveStrength, col = colnames(concrete)
plot(index ,training$CompressiveStrength, col = colnames(concrete))
plot(index ,training$CompressiveStrength, col = colnames(concrete))
range(concrete$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
install.packages("pgmm")
install.packages("ElemStatLearn")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
library(pgmm)
library(ElemStatLearn)
colnames(segmentationOriginal)
intrain <- createDataPartition(y = segmentationOriginal$Case, p = 0.7, list = F)
training <- segmentationOriginal[intrain,]
testing <- segmentationOriginal[-intrain,]
install.packages("e1071")
shiny::runApp('First')
trees
runApp('First')
View(car_data)
data("ChickWeight")
ChickWeight
runApp('First')
runApp('First')
runApp('First')
install.packages("googlevis")
install.packages("googleVis")
print("i")
Fruits
data(Fruits)
data(Fruits)
install.packages("plotly")
library(plotly)
plot_ly(mtcars, x = wt,  y = mpg, mode = "markers")
mtcars
library(plotly)
plot_ly(mtcars, x = mtcaras$wt,  y = mtcars$mpg, mode = "markers")
library(plotly)
plot_ly(mtcars, x = mtcars$wt,  y = mtcars$mpg, mode = "markers")
?plot_ly
library(googleVis)
Bubble <- gvisBubbleChart(Fruits, idvar="Fruit",
xvar="Sales", yvar="Expenses",
colorvar="Year", sizevar="Profit",
options=list(
hAxis='{minValue:75, maxValue:125}'))
plot(Bubble)
Pie <- gvisPieChart(CityPopularity)
plot(Pie)
require(datasets)
states <- data.frame(state.name, state.x77)
GeoStates <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
ChickWeight
plot_ly(ChickWeight, x = ChickWeight$Time, y = ChickWeight$weight, color = ChickWeight$Chick)
library(poltly)
plot_ly(ChickWeight, x = ChickWeight$Time, y = ChickWeight$weight, color = ChickWeight$Chick)
plot_ly(mtcars, x = mtcars$wt,  y = mtcars$mpg, mode = "markers")
library(googleVis)
library(plotly)
plot_ly(mtcars, x = mtcars$wt,  y = mtcars$mpg, mode = "markers")
library(googleVis)
Bubble <- gvisBubbleChart(Fruits, idvar="Fruit",
xvar="Sales", yvar="Expenses",
colorvar="Year", sizevar="Profit",
options=list(
hAxis='{minValue:75, maxValue:125}'))
plot(Bubble)
Pie <- gvisPieChart(CityPopularity)
plot(Pie)
require(datasets)
states <- data.frame(state.name, state.x77)
GeoStates <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
library(poltly)
plot_ly(ChickWeight, x = ChickWeight$Time, y = ChickWeight$weight, color = ChickWeight$Chick)
plot_ly(ChickWeight, x = ChickWeight$Time, y = ChickWeight$weight, color = ChickWeight$Chick)
View(tooth_data)
View(tooth_data)
plot_ly(tooth_data, x = tooth_data$dose, y = tooth_data$len, color = as.factor(tooth_data$supp))
Sys.setenv('SPARKR_SUBMIT_ARGS'='"--packages" "com.databricks:spark-csv_2.10:1.2.0" "sparkr-shell"')
library(SparkR, lib.loc = "C:\\Users\\shubh\\Documents\\Spark\\spark-2.2.0-bin-hadoop2.7\\R\\lib")
sc <- sparkR.init(master = "local", sparkHome = "C:\\Users\\shubh\\Documents\\Spark\\spark-2.2.0-bin-hadoop2.7\\R\\lib")
help("Deprecated")
sparkR.session()
todays_date = format(Sys.Date(), "%Y%m%d")
formatted_date = format(Sys.Date(), "%b-%d-%Y")
#enter your working directory here
wd <- "C:\\Users\\shubh\\Documents\\GitHub\\bitcoin_data"
setwd(wd)
dir.create(formatted_date)
txt_list <- unlist(strsplit(readLines("https://coinmarketcap.com/currencies/bitcoin/historical-data/?start=20130428&end=20171105"), "\n"))
start_of_data <- grep("<tbody>", txt_list) + 3
end_of_data <- grep("/tbody", txt_list)
find_date <- function(txt_list) {
list_of_dates = list()
library(qdapRegex)
for(i in seq(from=start_of_data, to=end_of_data, by=10)){
list_of_dates = c(list_of_dates, rm_between(txt_list[i], "t\">", "</", extract=TRUE)[[1]])
}
return(unlist(list_of_dates))
}
#list_dates = find_date(txt_list)
find_open <- function(txt_list) {
list_of_open_price = list()
library(qdapRegex)
for(i in seq(from=start_of_data + 1, to=end_of_data, by=10)){
list_of_open_price = c(list_of_open_price, as.double(rm_between(txt_list[i], "<td>", "</td>", extract=TRUE)[[1]]))
}
return(unlist(list_of_open_price))
}
#list_open_price = find_open()
find_high <- function(txt_list) {
list_of_high_price = list()
library(qdapRegex)
for(i in seq(from=start_of_data + 2, to=end_of_data, by=10)){
list_of_high_price = c(list_of_high_price, as.double(rm_between(txt_list[i], "<td>", "</td>", extract=TRUE)[[1]]))
}
return(unlist(list_of_high_price))
}
#list_high_price = find_high()
find_low <- function(txt_list) {
list_of_low_price = list()
library(qdapRegex)
for(i in seq(from=start_of_data + 3, to=end_of_data, by=10)){
list_of_low_price = c(list_of_low_price, as.double(rm_between(txt_list[i], "<td>", "</td>", extract=TRUE)[[1]]))
}
return(unlist(list_of_low_price))
}
#list_low_price = find_low()
find_close <- function(txt_list) {
list_of_close_price = list()
library(qdapRegex)
for(i in seq(from=start_of_data + 4, to=end_of_data, by=10)){
list_of_close_price = c(list_of_close_price, as.double(rm_between(txt_list[i], "<td>", "</td>", extract=TRUE)[[1]]))
}
return(unlist(list_of_close_price))
}
#list_close_price = find_close()
find_volume <- function(txt_list) {
list_of_volume_price = list()
library(qdapRegex)
for(i in seq(from=start_of_data + 5, to=end_of_data, by=10)){
list_of_volume_price = c(list_of_volume_price, as.double(gsub(",", "", rm_between(txt_list[i], "<td>", "</td>", extract=TRUE)[[1]])))
}
return(unlist(list_of_volume_price))
}
#list_volume_price = find_volume(txt_list)
find_market <- function(txt_list) {
list_of_market_price = list()
library(qdapRegex)
for(i in seq(from=start_of_data + 6, to=end_of_data, by=10)){
list_of_market_price = c(list_of_market_price, as.double(gsub(",", "", rm_between(txt_list[i], "<td>", "</td>", extract=TRUE)[[1]])))
}
return(unlist(list_of_market_price))
}
#list_market_price = find_market()
cryptocurrencies <- function() {
website <- "https://coinmarketcap.com/all/views/all/"
html_text <- readLines(website)
crypto_list <- unlist(strsplit(html_text, "\n"))
write(html_text, "crypto.txt")
return(crypto_list)
}
get_currencies <- function() {
crypto_list <- cryptocurrencies()
crypto_list <- unlist(crypto_list)
library(qdapRegex)
list_of_currencies = list()
start <- which(grepl("bitcoin", crypto_list),arr.ind = TRUE)[4]
for (i in seq(from=start, to=(start+ 400) - 1, by=40)){
list_of_currencies <- c(list_of_currencies, rm_between(crypto_list[i], "\">", "</a>", extract = TRUE)[[1]])
}
print(list_of_currencies)
return(unlist(list_of_currencies))
}
list_of_currencies <- get_currencies()
todays_date = format(Sys.Date(), "%Y%m%d")
formatted_date = format(Sys.Date(), "%b-%d-%Y")
#enter your working directory here
wd <- "C:\\Users\\shubh\\Documents\\GitHub\\bitcoin_data"
setwd(wd)
dir.create(formatted_date)
txt_list <- unlist(strsplit(readLines("https://coinmarketcap.com/currencies/bitcoin/historical-data/?start=20130428&end=20171105"), "\n"))
start_of_data <- grep("<tbody>", txt_list) + 3
end_of_data <- grep("/tbody", txt_list)
find_date <- function(txt_list) {
list_of_dates = list()
library(qdapRegex)
for(i in seq(from=start_of_data, to=end_of_data, by=10)){
list_of_dates = c(list_of_dates, rm_between(txt_list[i], "t\">", "</", extract=TRUE)[[1]])
}
return(unlist(list_of_dates))
}
#list_dates = find_date(txt_list)
find_open <- function(txt_list) {
list_of_open_price = list()
library(qdapRegex)
for(i in seq(from=start_of_data + 1, to=end_of_data, by=10)){
list_of_open_price = c(list_of_open_price, as.double(rm_between(txt_list[i], "<td>", "</td>", extract=TRUE)[[1]]))
}
return(unlist(list_of_open_price))
}
#list_open_price = find_open()
find_high <- function(txt_list) {
list_of_high_price = list()
library(qdapRegex)
for(i in seq(from=start_of_data + 2, to=end_of_data, by=10)){
list_of_high_price = c(list_of_high_price, as.double(rm_between(txt_list[i], "<td>", "</td>", extract=TRUE)[[1]]))
}
return(unlist(list_of_high_price))
}
#list_high_price = find_high()
find_low <- function(txt_list) {
list_of_low_price = list()
library(qdapRegex)
for(i in seq(from=start_of_data + 3, to=end_of_data, by=10)){
list_of_low_price = c(list_of_low_price, as.double(rm_between(txt_list[i], "<td>", "</td>", extract=TRUE)[[1]]))
}
return(unlist(list_of_low_price))
}
#list_low_price = find_low()
find_close <- function(txt_list) {
list_of_close_price = list()
library(qdapRegex)
for(i in seq(from=start_of_data + 4, to=end_of_data, by=10)){
list_of_close_price = c(list_of_close_price, as.double(rm_between(txt_list[i], "<td>", "</td>", extract=TRUE)[[1]]))
}
return(unlist(list_of_close_price))
}
#list_close_price = find_close()
find_volume <- function(txt_list) {
list_of_volume_price = list()
library(qdapRegex)
for(i in seq(from=start_of_data + 5, to=end_of_data, by=10)){
list_of_volume_price = c(list_of_volume_price, as.double(gsub(",", "", rm_between(txt_list[i], "<td>", "</td>", extract=TRUE)[[1]])))
}
return(unlist(list_of_volume_price))
}
#list_volume_price = find_volume(txt_list)
find_market <- function(txt_list) {
list_of_market_price = list()
library(qdapRegex)
for(i in seq(from=start_of_data + 6, to=end_of_data, by=10)){
list_of_market_price = c(list_of_market_price, as.double(gsub(",", "", rm_between(txt_list[i], "<td>", "</td>", extract=TRUE)[[1]])))
}
return(unlist(list_of_market_price))
}
#list_market_price = find_market()
cryptocurrencies <- function() {
website <- "https://coinmarketcap.com/all/views/all/"
html_text <- readLines(website)
crypto_list <- unlist(strsplit(html_text, "\n"))
write(html_text, "crypto.txt")
return(crypto_list)
}
get_currencies <- function() {
crypto_list <- cryptocurrencies()
crypto_list <- unlist(crypto_list)
library(qdapRegex)
list_of_currencies = list()
start <- which(grepl("bitcoin", crypto_list),arr.ind = TRUE)[4]
for (i in seq(from=start, to=(start+ 400) - 1, by=40)){
list_of_currencies <- c(list_of_currencies, rm_between(crypto_list[i], "\">", "</a>", extract = TRUE)[[1]])
}
print(list_of_currencies)
return(unlist(list_of_currencies))
}
list_of_currencies <- get_currencies()
get_df <- function(website){
thepage <- readLines(website)
txt_list <- unlist(strsplit(thepage, "\n"))
start_of_data <- grep("<tbody>", txt_list) + 3
end_of_data <- grep("/tbody", txt_list)
list_dates <- find_date(txt_list)
list_open_price <- find_open(txt_list)
list_high_price<- find_high(txt_list)
list_low_price <- find_low(txt_list)
list_close_price <- find_close(txt_list)
list_volume_price <- find_volume(txt_list)
list_market_price <- find_market(txt_list)
df <- data.frame("Date" = list_dates, "Open" = list_open_price, "High" = list_high_price,
"Low" = list_low_price, "Close" = list_close_price,
"Volume" = list_volume_price, "Market Cap" = list_market_price)
return(df)
}
df <- get_df(input)
write_csv <- function() {
list_of_currencies <- get_currencies()
todays_date = format(Sys.Date(), "%Y%m%d")
formatted_date = format(Sys.Date(), "%b-%d-%Y")
setwd(wd)
#dir.create(formatted_date)
setwd(paste(wd, "\\", formatted_date, sep = ""))
for (i in seq(from = 1, to = length(list_of_currencies), by = 1)){
list_of_currencies[i] <- gsub(" ", "-", list_of_currencies[i])
csv_name <- paste(list_of_currencies[i], ".csv", sep = "")
print(paste("Creating",csv_name))
website <- paste("https://coinmarketcap.com/currencies/", list_of_currencies[i],"/historical-data/?start=20130428&end=", toString(todays_date), sep = "")
df <- get_df(website)
write.csv(df, csv_name)
}
}
write_csv()
setwd(paste(wd, "\\", formatted_date, sep = ""))
bitcoin_price <- read.csv("Bitcoin.csv")
bitcoin_price$Date<- as.Date(bitcoin_price$Date, format = "%b %d, %Y")
library(plotly)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines')
p
crypto_list <- cryptocurrencies()
crypto_list
start <- which(grepl("bitcoin", crypto_list),arr.ind = TRUE)[4]
start
list_of_currencies <- c("Bitcoin", "Ethereum", "Dash", "Bitcoin-Cash", "Ethereum-Classic", "LiteCoin", "Monero", "Ripple", "NEM", "NEO")
get_df <- function(website){
thepage <- readLines(website)
txt_list <- unlist(strsplit(thepage, "\n"))
start_of_data <- grep("<tbody>", txt_list) + 3
end_of_data <- grep("/tbody", txt_list)
list_dates <- find_date(txt_list)
list_open_price <- find_open(txt_list)
list_high_price<- find_high(txt_list)
list_low_price <- find_low(txt_list)
list_close_price <- find_close(txt_list)
list_volume_price <- find_volume(txt_list)
list_market_price <- find_market(txt_list)
df <- data.frame("Date" = list_dates, "Open" = list_open_price, "High" = list_high_price,
"Low" = list_low_price, "Close" = list_close_price,
"Volume" = list_volume_price, "Market Cap" = list_market_price)
return(df)
}
df <- get_df(input)
write_csv <- function() {
list_of_currencies <- get_currencies()
todays_date = format(Sys.Date(), "%Y%m%d")
formatted_date = format(Sys.Date(), "%b-%d-%Y")
setwd(wd)
#dir.create(formatted_date)
setwd(paste(wd, "\\", formatted_date, sep = ""))
for (i in seq(from = 1, to = length(list_of_currencies), by = 1)){
list_of_currencies[i] <- gsub(" ", "-", list_of_currencies[i])
csv_name <- paste(list_of_currencies[i], ".csv", sep = "")
print(paste("Creating",csv_name))
website <- paste("https://coinmarketcap.com/currencies/", list_of_currencies[i],"/historical-data/?start=20130428&end=", toString(todays_date), sep = "")
df <- get_df(website)
write.csv(df, csv_name)
}
}
write_csv()
setwd(paste(wd, "\\", formatted_date, sep = ""))
bitcoin_price <- read.csv("Bitcoin.csv")
bitcoin_price$Date<- as.Date(bitcoin_price$Date, format = "%b %d, %Y")
library(plotly)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines')
p
list_of_currencies <- c("Bitcoin", "Ethereum", "Dash", "Bitcoin-Cash", "Ethereum-Classic", "LiteCoin", "Monero", "Ripple", "NEM", "NEO")
get_df <- function(website){
thepage <- readLines(website)
txt_list <- unlist(strsplit(thepage, "\n"))
start_of_data <- grep("<tbody>", txt_list) + 3
end_of_data <- grep("/tbody", txt_list)
list_dates <- find_date(txt_list)
list_open_price <- find_open(txt_list)
list_high_price<- find_high(txt_list)
list_low_price <- find_low(txt_list)
list_close_price <- find_close(txt_list)
list_volume_price <- find_volume(txt_list)
list_market_price <- find_market(txt_list)
df <- data.frame("Date" = list_dates, "Open" = list_open_price, "High" = list_high_price,
"Low" = list_low_price, "Close" = list_close_price,
"Volume" = list_volume_price, "Market Cap" = list_market_price)
return(df)
}
df <- get_df(input)
write_csv <- function() {
#list_of_currencies <- get_currencies()
todays_date = format(Sys.Date(), "%Y%m%d")
formatted_date = format(Sys.Date(), "%b-%d-%Y")
setwd(wd)
#dir.create(formatted_date)
setwd(paste(wd, "\\", formatted_date, sep = ""))
for (i in seq(from = 1, to = length(list_of_currencies), by = 1)){
list_of_currencies[i] <- gsub(" ", "-", list_of_currencies[i])
csv_name <- paste(list_of_currencies[i], ".csv", sep = "")
print(paste("Creating",csv_name))
website <- paste("https://coinmarketcap.com/currencies/", list_of_currencies[i],"/historical-data/?start=20130428&end=", toString(todays_date), sep = "")
df <- get_df(website)
write.csv(df, csv_name)
}
}
write_csv()
setwd(paste(wd, "\\", formatted_date, sep = ""))
bitcoin_price <- read.csv("Bitcoin.csv")
bitcoin_price$Date<- as.Date(bitcoin_price$Date, format = "%b %d, %Y")
library(plotly)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines')
p
