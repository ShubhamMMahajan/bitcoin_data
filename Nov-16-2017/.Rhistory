library(ElemStatLearn)
colnames(segmentationOriginal)
intrain <- createDataPartition(y = segmentationOriginal$Case, p = 0.7, list = F)
training <- segmentationOriginal[intrain,]
testing <- segmentationOriginal[-intrain,]
install.packages("e1071")
shiny::runApp('First')
trees
runApp('First')
View(car_data)
data("ChickWeight")
ChickWeight
runApp('First')
runApp('First')
runApp('First')
install.packages("googlevis")
install.packages("googleVis")
print("i")
Fruits
data(Fruits)
data(Fruits)
install.packages("plotly")
library(plotly)
plot_ly(mtcars, x = wt,  y = mpg, mode = "markers")
mtcars
library(plotly)
plot_ly(mtcars, x = mtcaras$wt,  y = mtcars$mpg, mode = "markers")
library(plotly)
plot_ly(mtcars, x = mtcars$wt,  y = mtcars$mpg, mode = "markers")
?plot_ly
library(googleVis)
Bubble <- gvisBubbleChart(Fruits, idvar="Fruit",
xvar="Sales", yvar="Expenses",
colorvar="Year", sizevar="Profit",
options=list(
hAxis='{minValue:75, maxValue:125}'))
plot(Bubble)
Pie <- gvisPieChart(CityPopularity)
plot(Pie)
require(datasets)
states <- data.frame(state.name, state.x77)
GeoStates <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
ChickWeight
plot_ly(ChickWeight, x = ChickWeight$Time, y = ChickWeight$weight, color = ChickWeight$Chick)
library(poltly)
plot_ly(ChickWeight, x = ChickWeight$Time, y = ChickWeight$weight, color = ChickWeight$Chick)
plot_ly(mtcars, x = mtcars$wt,  y = mtcars$mpg, mode = "markers")
library(googleVis)
library(plotly)
plot_ly(mtcars, x = mtcars$wt,  y = mtcars$mpg, mode = "markers")
library(googleVis)
Bubble <- gvisBubbleChart(Fruits, idvar="Fruit",
xvar="Sales", yvar="Expenses",
colorvar="Year", sizevar="Profit",
options=list(
hAxis='{minValue:75, maxValue:125}'))
plot(Bubble)
Pie <- gvisPieChart(CityPopularity)
plot(Pie)
require(datasets)
states <- data.frame(state.name, state.x77)
GeoStates <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
library(poltly)
plot_ly(ChickWeight, x = ChickWeight$Time, y = ChickWeight$weight, color = ChickWeight$Chick)
plot_ly(ChickWeight, x = ChickWeight$Time, y = ChickWeight$weight, color = ChickWeight$Chick)
View(tooth_data)
View(tooth_data)
plot_ly(tooth_data, x = tooth_data$dose, y = tooth_data$len, color = as.factor(tooth_data$supp))
Sys.setenv('SPARKR_SUBMIT_ARGS'='"--packages" "com.databricks:spark-csv_2.10:1.2.0" "sparkr-shell"')
library(SparkR, lib.loc = "C:\\Users\\shubh\\Documents\\Spark\\spark-2.2.0-bin-hadoop2.7\\R\\lib")
sc <- sparkR.init(master = "local", sparkHome = "C:\\Users\\shubh\\Documents\\Spark\\spark-2.2.0-bin-hadoop2.7\\R\\lib")
help("Deprecated")
sparkR.session()
todays_date = format(Sys.Date(), "%Y%m%d")
formatted_date = format(Sys.Date(), "%b-%d-%Y")
#enter your working directory here
wd <- "C:\\Users\\shubh\\Documents\\GitHub\\bitcoin_data"
setwd(wd)
dir.create(formatted_date)
txt_list <- unlist(strsplit(readLines("https://coinmarketcap.com/currencies/bitcoin/historical-data/?start=20130428&end=20171105"), "\n"))
start_of_data <- grep("<tbody>", txt_list) + 3
end_of_data <- grep("/tbody", txt_list)
find_date <- function(txt_list) {
list_of_dates = list()
library(qdapRegex)
for(i in seq(from=start_of_data, to=end_of_data, by=10)){
list_of_dates = c(list_of_dates, rm_between(txt_list[i], "t\">", "</", extract=TRUE)[[1]])
}
return(unlist(list_of_dates))
}
#list_dates = find_date(txt_list)
find_open <- function(txt_list) {
list_of_open_price = list()
library(qdapRegex)
for(i in seq(from=start_of_data + 1, to=end_of_data, by=10)){
list_of_open_price = c(list_of_open_price, as.double(rm_between(txt_list[i], "<td>", "</td>", extract=TRUE)[[1]]))
}
return(unlist(list_of_open_price))
}
#list_open_price = find_open()
find_high <- function(txt_list) {
list_of_high_price = list()
library(qdapRegex)
for(i in seq(from=start_of_data + 2, to=end_of_data, by=10)){
list_of_high_price = c(list_of_high_price, as.double(rm_between(txt_list[i], "<td>", "</td>", extract=TRUE)[[1]]))
}
return(unlist(list_of_high_price))
}
#list_high_price = find_high()
find_low <- function(txt_list) {
list_of_low_price = list()
library(qdapRegex)
for(i in seq(from=start_of_data + 3, to=end_of_data, by=10)){
list_of_low_price = c(list_of_low_price, as.double(rm_between(txt_list[i], "<td>", "</td>", extract=TRUE)[[1]]))
}
return(unlist(list_of_low_price))
}
#list_low_price = find_low()
find_close <- function(txt_list) {
list_of_close_price = list()
library(qdapRegex)
for(i in seq(from=start_of_data + 4, to=end_of_data, by=10)){
list_of_close_price = c(list_of_close_price, as.double(rm_between(txt_list[i], "<td>", "</td>", extract=TRUE)[[1]]))
}
return(unlist(list_of_close_price))
}
#list_close_price = find_close()
find_volume <- function(txt_list) {
list_of_volume_price = list()
library(qdapRegex)
for(i in seq(from=start_of_data + 5, to=end_of_data, by=10)){
list_of_volume_price = c(list_of_volume_price, as.double(gsub(",", "", rm_between(txt_list[i], "<td>", "</td>", extract=TRUE)[[1]])))
}
return(unlist(list_of_volume_price))
}
#list_volume_price = find_volume(txt_list)
find_market <- function(txt_list) {
list_of_market_price = list()
library(qdapRegex)
for(i in seq(from=start_of_data + 6, to=end_of_data, by=10)){
list_of_market_price = c(list_of_market_price, as.double(gsub(",", "", rm_between(txt_list[i], "<td>", "</td>", extract=TRUE)[[1]])))
}
return(unlist(list_of_market_price))
}
#list_market_price = find_market()
# cryptocurrencies <- function() {
#     website <- "https://coinmarketcap.com/all/views/all/"
#     html_text <- readLines(website)
#     crypto_list <- unlist(strsplit(html_text, "\n"))
#     write(html_text, "crypto.txt")
#     return(crypto_list)
#
# }
#
# get_currencies <- function() {
#     crypto_list <- cryptocurrencies()
#     crypto_list <- unlist(crypto_list)
#     library(qdapRegex)
#     list_of_currencies = list()
#     start <- which(grepl("bitcoin", crypto_list),arr.ind = TRUE)[4]
#     for (i in seq(from=start, to=(start+ 400) - 1, by=40)){
#         list_of_currencies <- c(list_of_currencies, rm_between(crypto_list[i], "\">", "</a>", extract = TRUE)[[1]])
#     }
#     print(list_of_currencies)
#     return(unlist(list_of_currencies))
# }
list_of_currencies <- c("Bitcoin", "Ethereum", "Dash", "Bitcoin-Cash", "Ethereum-Classic", "LiteCoin", "Monero", "Ripple", "NEM", "NEO")
get_df <- function(website){
thepage <- readLines(website)
txt_list <- unlist(strsplit(thepage, "\n"))
start_of_data <- grep("<tbody>", txt_list) + 3
end_of_data <- grep("/tbody", txt_list)
list_dates <- find_date(txt_list)
list_open_price <- find_open(txt_list)
list_high_price<- find_high(txt_list)
list_low_price <- find_low(txt_list)
list_close_price <- find_close(txt_list)
list_volume_price <- find_volume(txt_list)
list_market_price <- find_market(txt_list)
df <- data.frame("Date" = list_dates, "Open" = list_open_price, "High" = list_high_price,
"Low" = list_low_price, "Close" = list_close_price,
"Volume" = list_volume_price, "Market Cap" = list_market_price)
return(df)
}
df <- get_df(input)
write_csv <- function() {
#list_of_currencies <- get_currencies()
todays_date = format(Sys.Date(), "%Y%m%d")
formatted_date = format(Sys.Date(), "%b-%d-%Y")
setwd(wd)
#dir.create(formatted_date)
setwd(paste(wd, "\\", formatted_date, sep = ""))
for (i in seq(from = 1, to = length(list_of_currencies), by = 1)){
list_of_currencies[i] <- gsub(" ", "-", list_of_currencies[i])
csv_name <- paste(list_of_currencies[i], ".csv", sep = "")
print(paste("Creating",csv_name))
website <- paste("https://coinmarketcap.com/currencies/", list_of_currencies[i],"/historical-data/?start=20130428&end=", toString(todays_date), sep = "")
df <- get_df(website)
write.csv(df, csv_name)
}
}
write_csv()
setwd(paste(wd, "\\", formatted_date, sep = ""))
bitcoin_price <- read.csv("Bitcoin.csv")
bitcoin_price$Date<- as.Date(bitcoin_price$Date, format = "%b %d, %Y")
library(plotly)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines')
p
?plotly
?plot_ly
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = "Date", yaxis = "Price in $")
p
x <- list(
title = "Date",
titlefont = f
)
y <- list(
title = "Price in $",
titlefont = f
)
x <- list(
title = "Date"
)
y <- list(
title = "Price in $"
)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y)
p
model <- lm(bitcoin_price$Date ~ bitcoin_price$Open)
summary(model)
model <- lm(formula = bitcoin_price$Date ~ bitcoin_price$Open)
model
summary(model)
?lm
model <- lm(formula = Date ~ Open, data = bitcoin_price)
model
summary(model)
plot(model)
model <- lm(formula = as.numeric(as.POSIXct(Date, format="%b %d, %Y") ~ Open, data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y)
plot(model)
p
model <- lm(formula = as.numeric(as.POSIXct(Date, format="%b %d, %Y")) ~ Open, data = bitcoin_price)
model
plot(model)
summary(model)
as.numeric(as.POSIXct("Jun 14, 2017", format="%b %d, %Y"))
model$x
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_trace(y = ~model, name = 'model', mode = 'lines+markers')
p
model$coefficients
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_trace(x = ~model, name = 'model', mode = 'lines+markers')
p
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_trace(x = bitcoin_price$Date, y = model, name = 'model', mode = 'lines+markers')
p
plot(bitcoin_price$Date, model)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(x = ~bitcoin_price$Date, y = fitted(model))
p
model <- lm(formula = as.numeric(Date) ~ Open, data = bitcoin_price)
model
summary(model)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(x = ~bitcoin_price$Date, y = fitted(model))
p
p <- plot_ly(bitcoin_price, x = ~as.numeric(bitcoin_price$Date), y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(x = ~bitcoin_price$Date, y = fitted(model))
plot(bitcoin_price$Date, model)
p
p <- plot_ly(bitcoin_price, x = ~as.numeric(bitcoin_price$Date), y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(x = ~bitcoin_price$Date, y = model)
plot(bitcoin_price$Date, model)
p
model <- lm(formula = Date ~ Open, data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(x = ~bitcoin_price$Date, y = model)
plot(bitcoin_price$Date, model)
p
model <- lm(formula = log(Date) ~ Open, data = bitcoin_price)
model <- lm(formula = log(as.numeric(Date)) ~ Open, data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(x = ~bitcoin_price$Date, y = model)
plot(bitcoin_price$Date, model)
p
model <- lm(formula = log(log(as.numeric(Date))) ~ Open, data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(x = ~bitcoin_price$Date, y = model)
plot(bitcoin_price$Date, model)
p
model <- lm(formula = as.numeric(Date) ~ Open, data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(x = ~bitcoin_price$Date, y = model)
plot(bitcoin_price$Date, model)
p
model <- lm(formula = as.numeric(Date) ~ Open, data = bitcoin_price)
model
model <- lm(formula = as.numeric(Date) ~ Open + I(Open^2) + I(Open^3), data = bitcoin_price)
model
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(x = ~bitcoin_price$Date, y = model)
p
model <- lm(formula = as.numeric(Date) ~ Open + I(x^2) + I(x^3), data = bitcoin_price)
model <- lm(formula = as.numeric(Date) ~ Open^2, data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(x = ~bitcoin_price$Date, y = model)
plot(bitcoin_price$Date, model)
p
model <- lm(formula = Date ~ Open^2, data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(x = ~bitcoin_price$Date, y = model)
plot(bitcoin_price$Date, model)
p
model <- lm(formula = Date ~ Open + 4000, data = bitcoin_price)
model <- lm(formula = Date ~ (Open + 4000), data = bitcoin_price)
model <- lm(formula = Date ~ Open, data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(x = ~bitcoin_price$Date, y = model)
plot(bitcoin_price$Date, model)
p
?exp
model <- lm(formula = Date ~ exp(Open), data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(x = ~bitcoin_price$Date, y = exp(model))
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(x = ~bitcoin_price$Date, y = model^2)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(x = ~bitcoin_price$Date, y = exp(fitted(model)))
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(x = ~bitcoin_price$Date, y = fitted(model))
plot(bitcoin_price$Date, model)
p
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(x = ~bitcoin_price$Date, y = model)
plot(bitcoin_price$Date, model)
p
model
predict(model)
p <- predict(model)
p[length(p)]
?exp
exp(9)
exp(9)
exp(2)
exp(3)
exp(1:10)
exp(1:10, 0.5)
x <- 1:10
x
x^2
as.date(1, origin = "1970-01-01")
as.Date(1, origin = "1970-01-01")
as.Date(5, origin = "1970-01-01")
class(1) <- "Date"
date_num <- as.Date(bitcoin_price$Date)
date_num
date_num <- as.numeric(bitcoin_price$Date)
date_num
date_date <- as.Date(date_num, origin = "1970-01-01")
date_date
model <- lm(formula = Date ~ Open^3, data = bitcoin_price)
model
model <- lm(formula = Date ~ Open^5, data = bitcoin_price)
model
open_squared <- bitcoin_price$Open^2
model <- lm(bitcoin_price$Date ~ open_squared)
model
open_squared <- bitcoin_price$Open^3
model <- lm(bitcoin_price$Date ~ open_squared)
model
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(x = ~bitcoin_price$Date, y = model)
plot(bitcoin_price$Date, model)
p
x <- list(
title = "Date"
)
y <- list(
title = "Price in $"
)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(x = ~bitcoin_price$Date, y = model)
plot(bitcoin_price$Date, model)
p
open_squared <- bitcoin_price$Open^0.5
model <- lm(bitcoin_price$Date ~ open_squared)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(x = ~bitcoin_price$Date, y = model)
plot(bitcoin_price$Date, model)
p
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines( y = model)
plot(bitcoin_price$Date, model)
p
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(y = predict(model))
plot(bitcoin_price$Date, model)
p
model <- lm(bitcoin_price$Date ~ open_squared)
model <- lm(open_squared ~ bitcoin_price$Date)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(y = model)
plot(bitcoin_price$Date, model)
p
open_squared <- bitcoin_price$Open^3
model <- lm(open_squared ~ bitcoin_price$Date)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(y = model)
plot(bitcoin_price$Date, model)
p
open_squared
392744219489^0.333
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(y = predict(model))
plot(bitcoin_price$Date, model)
p
open_squared <- bitcoin_price$Open^1
model <- lm(open_squared ~ bitcoin_price$Date)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(y = predict(model))
plot(bitcoin_price$Date, model)
p
open_squared <- bitcoin_price$Open^1.5
model <- lm(open_squared ~ bitcoin_price$Date)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(y = predict(model))
plot(bitcoin_price$Date, model)
p
open_squared <- bitcoin_price$Open^1
model <- lm(open_squared ~ bitcoin_price$Date)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(y = predict(model))
plot(bitcoin_price$Date, model)
p
open_squared <- bitcoin_price$Open^0.5
model <- lm(open_squared ~ bitcoin_price$Date)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(y = predict(model))
plot(bitcoin_price$Date, model)
p
open_squared <- bitcoin_price$Open^1.3
model <- lm(open_squared ~ bitcoin_price$Date)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(y = predict(model))
plot(bitcoin_price$Date, model)
p
model <- lm(Open ~ Date, data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(y = predict(model))
plot(bitcoin_price$Date, model)
p
model <- lm(log(Open) ~ Date, data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(y = predict(model))
plot(bitcoin_price$Date, model)
p
model <- lm(Open^2 ~ Date, data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(y = predict(model))
plot(bitcoin_price$Date, model)
p
7800^2
model <- lm(Open^1.04 ~ Date, data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(y = predict(model))
plot(bitcoin_price$Date, model)
p
model <- lm(Open^1.1 ~ Date, data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(y = predict(model))
plot(bitcoin_price$Date, model)
p
model <- lm(Open^1.3 ~ Date, data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(y = predict(model))
plot(bitcoin_price$Date, model)
p
model <- lm(Open^1.13 ~ Date, data = bitcoin_price)
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(y = predict(model))
plot(bitcoin_price$Date, model)
p
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(y = predict(model), label = "Predicted Price")
plot(bitcoin_price$Date, model)
p
p <- plot_ly(bitcoin_price, x = ~bitcoin_price$Date, y = ~bitcoin_price$Open, name = 'Price in $', type = 'scatter', mode = 'lines') %>%
layout(xaxis = x, yaxis = y) %>% add_lines(y = predict(model), name = "Predicted Price")
plot(bitcoin_price$Date, model)
p
model$residuals
for (i in seq(from=0.01, to=0.4, by = 0.01)){
}
for (i in seq(from=0.01, to=0.4, by = 0.01)){
print(i)
}
?sum
